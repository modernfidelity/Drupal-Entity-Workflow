<?php
// $Id$
/**
 * @file
 * Install, update and uninstall functions for the workflow module.
 *
 */

/**
 * Implements hook_install().
 */
function entity_workflow_install() {
}

/**
 * Implements hook_uninstall().
 */
function entity_workflow_uninstall() {
  variable_del('entity_workflow_states_per_page');
  
  
  // @todo - replace with entity types
  // Delete type-workflow mapping variables.
  foreach (node_type_get_types() as $type => $name) {
    variable_del('entity_workflow_' . $type);
  }
}

/**
 * Implements hook_schema().
 */
function entity_workflow_schema() {
  $schema['entity_workflows'] = array(
    'description' => 'Entity Workflows',
    'fields'      => array(
      'wid'       => array('type' => 'serial', 'not null' => TRUE),
      'name'      => array('type' => 'varchar', 'length' => '255', 'not null' => TRUE, 'default' => ''),
      'tab_roles' => array('type' => 'varchar', 'length' => '60', 'not null' => TRUE, 'default' => ''),
      'options'   => array('type' => 'text', 'size' => 'big', 'not null' => FALSE)),
    'primary key' => array('wid'),
    'unique keys' => array('name' => array('name')),
  );
  $schema['entity_workflow_type_map'] = array(
    'fields' => array(
      'type' => array('type' => 'varchar', 'length' => '255', 'not null' => TRUE, 'default' => ''),
      'wid'  => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0, 'disp-width' => '10')),
    'indexes' => array(
      'type' => array('type', 'wid')),
  );
  $schema['entity_workflow_transitions'] = array(
    'fields' => array(
      'tid'        => array('type' => 'serial', 'not null' => TRUE),
      'sid'        => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0, 'disp-width' => '10'),
      'target_sid' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0, 'disp-width' => '10'),
      'roles'      => array('type' => 'varchar', 'length' => '255', 'not null' => FALSE)),
    'primary key' => array('tid'),
    'indexes' => array(
      'sid' => array('sid'),
      'target_sid' => array('target_sid')),
  );
  $schema['entity_workflow_states'] = array(
    'fields' => array(
      'sid'    => array('type' => 'serial', 'not null' => TRUE),
      'wid'    => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0, 'disp-width' => '10'),
      'state'  => array('type' => 'varchar', 'length' => '255', 'not null' => TRUE, 'default' => ''),
      'weight' => array('type' => 'int', 'size' => 'tiny', 'not null' => TRUE, 'default' => 0, 'disp-width' => '4'),
      'sysid'  => array('type' => 'int', 'size' => 'tiny', 'not null' => TRUE, 'default' => 0, 'disp-width' => '4'),
      'status' => array('type' => 'int', 'size' => 'tiny', 'not null' => TRUE, 'default' => 1, 'disp-width' => '4')),
    'primary key' => array('sid'),
    'indexes' => array(
      'sysid' => array('sysid'),
      'wid' => array('wid')),
  );
  $schema['entity_workflow_scheduled_transition'] = array(
    'fields' => array(
      'nid'       => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0, 'disp-width' => '10'),
      'old_sid'   => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0, 'disp-width' => '10'),
      'sid'       => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0, 'disp-width' => '10'),
      'scheduled' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0, 'disp-width' => '10'),
      'comment'   => array('type' => 'text', 'size' => 'big', 'not null' => FALSE)),
    'indexes' => array(
      'nid' => array('nid')),
  );
  $schema['entity_workflow_entity_history'] = array(
    'fields' => array(
      'hid'     => array('type' => 'serial', 'not null' => TRUE),
      'nid'     => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0, 'disp-width' => '10'),
      'old_sid' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0, 'disp-width' => '10'),
      'sid'     => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0, 'disp-width' => '10'),
      'uid'     => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0, 'disp-width' => '10'),
      'stamp'   => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0, 'disp-width' => '10'),
      'comment' => array('type' => 'text', 'size' => 'big', 'not null' => FALSE)),
    'primary key' => array('hid'),
    'indexes' => array(
      'nid' => array('nid', 'sid')),
  );
  $schema['entity_workflow_entity'] = array(
    'fields' => array(
      'eid'   => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0, 'disp-width' => '10'),
      'entity_key_id'   => array('type' => 'varchar', 'length' => '255', 'not null' => TRUE, 'default' => ''),
      'sid'   => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0, 'disp-width' => '10'),
      'uid'   => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0, 'disp-width' => '10'),
      'eid'   => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0, 'disp-width' => '10'),
      'stamp' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0, 'disp-width' => '11')),
      
    'primary key' => array('eid'),
    'indexes' => array(
      'nid' => array('eid', 'sid', 'entity_key_id')),
  );
  return $schema;
}

/**
 * D6 and D7 are the only versions still under support.
 */
function entity_workflow_update_last_removed() {
  return 5204;
}

// Add a general data field for storing workflow options.
function entity_workflow_update_6100() {
  $ret = array();
  db_add_field($ret, 'entity_workflows', 'options', array('type' => 'text', 'size' => 'big', 'not null' => FALSE));
  // Seed existing workflows with the behavior of showing the comment field.
  $default = serialize(array('comment_log_node' => 1, 'comment_log_tab' => 1));
  $query_result = db_query("UPDATE {entity_workflows} SET options = '%s'", $default);
  $ret[] = array('success' => $query_result !== FALSE, 'query' => "UPDATE {workflows} SET options = '$default'");
  return $ret;
}

// Tables upgraded from 5.x needs AUTOINCREMENT set.
function entity_workflow_update_6101() {
  $ret = array();
  $workflows = $entity_workflow_states = $entity_workflow_transitions = FALSE;
  // Test to see if the autoincrement attribute is present.
  switch ($GLOBALS['db_type']) {
    case 'mysqli':
    case 'mysql':
      $workflows = db_result(db_query("SHOW COLUMNS FROM {entity_workflows} WHERE field = 'wid' and extra REGEXP 'auto_increment'"));
      $entity_workflow_states = db_result(db_query("SHOW COLUMNS FROM {entity_workflow_states} WHERE field = 'sid' and extra REGEXP 'auto_increment'"));
      $entity_workflow_transitions = db_result(db_query("SHOW COLUMNS FROM {entity_workflow_transitions} WHERE field = 'tid' and extra REGEXP 'auto_increment'"));
      break;
    case 'pgsql':
      // Not sure how determine if a PostgreSQL field has a sequence.
      break;
  }
  if ($workflows === FALSE) {
    db_drop_primary_key($ret, 'entity_workflows');
    db_change_field($ret, 'entity_workflows', 'wid', 'wid', array('type' => 'serial', 'not null' => TRUE), array('primary key' => array('wid')));
  }
  if ($entity_workflow_states === FALSE) {
    db_drop_primary_key($ret, 'entity_workflow_states');
    db_change_field($ret, 'entity_workflow_states', 'sid', 'sid', array('type' => 'serial', 'not null' => TRUE), array('primary key' => array('sid')));
  }
  if ($entity_workflow_transitions === FALSE) {
    db_drop_primary_key($ret, 'entity_workflow_transitions');
    db_change_field($ret, 'entity_workflow_transitions', 'tid', 'tid', array('type' => 'serial', 'not null' => TRUE), array('primary key' => array('tid')));
  }
  return $ret;
}

// Table update from 6 to 7. Adding a unique key for fields (already held unique in code).
function entity_workflow_update_7000(){
  db_add_unique_key('entity_workflows', 'name', array('name'));
  db_add_unique_key('entity_workflow_states', 'wid_state', array('wid', 'state'));
}